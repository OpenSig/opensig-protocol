// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Signature extends ethereum.Event {
  get params(): Signature__Params {
    return new Signature__Params(this);
  }
}

export class Signature__Params {
  _event: Signature;

  constructor(event: Signature) {
    this._event = event;
  }

  get time(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get signer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get nonce(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get board(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }

  get data(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }
}

export class OpensigPublicNoticeBoard extends ethereum.SmartContract {
  static bind(address: Address): OpensigPublicNoticeBoard {
    return new OpensigPublicNoticeBoard("OpensigPublicNoticeBoard", address);
  }

  CHAIN_ID(): BigInt {
    let result = super.call("CHAIN_ID", "CHAIN_ID():(uint32)", []);

    return result[0].toBigInt();
  }

  try_CHAIN_ID(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("CHAIN_ID", "CHAIN_ID():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isNotarized(nonce: Bytes): boolean {
    let result = super.call("isNotarized", "isNotarized(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(nonce),
    ]);

    return result[0].toBoolean();
  }

  try_isNotarized(nonce: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall("isNotarized", "isNotarized(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(nonce),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class NotarizeCall extends ethereum.Call {
  get inputs(): NotarizeCall__Inputs {
    return new NotarizeCall__Inputs(this);
  }

  get outputs(): NotarizeCall__Outputs {
    return new NotarizeCall__Outputs(this);
  }
}

export class NotarizeCall__Inputs {
  _call: NotarizeCall;

  constructor(call: NotarizeCall) {
    this._call = call;
  }

  get board(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get nonce(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class NotarizeCall__Outputs {
  _call: NotarizeCall;

  constructor(call: NotarizeCall) {
    this._call = call;
  }
}
